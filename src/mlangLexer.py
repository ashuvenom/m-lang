# Generated from mlang.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,176,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,3,15,154,8,15,1,16,1,16,5,16,158,8,16,10,16,12,16,161,9,
        16,1,17,4,17,164,8,17,11,17,12,17,165,1,18,4,18,169,8,18,11,18,12,
        18,170,1,18,1,18,1,19,1,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,3,0,9,10,13,13,32,32,179,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,46,1,0,0,0,5,49,
        1,0,0,0,7,51,1,0,0,0,9,55,1,0,0,0,11,57,1,0,0,0,13,59,1,0,0,0,15,
        61,1,0,0,0,17,63,1,0,0,0,19,71,1,0,0,0,21,78,1,0,0,0,23,90,1,0,0,
        0,25,102,1,0,0,0,27,123,1,0,0,0,29,141,1,0,0,0,31,153,1,0,0,0,33,
        155,1,0,0,0,35,163,1,0,0,0,37,168,1,0,0,0,39,174,1,0,0,0,41,42,5,
        99,0,0,42,43,5,97,0,0,43,44,5,115,0,0,44,45,5,116,0,0,45,2,1,0,0,
        0,46,47,5,105,0,0,47,48,5,115,0,0,48,4,1,0,0,0,49,50,5,59,0,0,50,
        6,1,0,0,0,51,52,5,115,0,0,52,53,5,97,0,0,53,54,5,121,0,0,54,8,1,
        0,0,0,55,56,5,42,0,0,56,10,1,0,0,0,57,58,5,47,0,0,58,12,1,0,0,0,
        59,60,5,43,0,0,60,14,1,0,0,0,61,62,5,45,0,0,62,16,1,0,0,0,63,64,
        5,97,0,0,64,65,5,110,0,0,65,66,5,100,0,0,66,67,5,65,0,0,67,68,5,
        108,0,0,68,69,5,115,0,0,69,70,5,111,0,0,70,18,1,0,0,0,71,72,5,111,
        0,0,72,73,5,114,0,0,73,74,5,69,0,0,74,75,5,108,0,0,75,76,5,115,0,
        0,76,77,5,101,0,0,77,20,1,0,0,0,78,79,5,115,0,0,79,80,5,109,0,0,
        80,81,5,97,0,0,81,82,5,108,0,0,82,83,5,108,0,0,83,84,5,101,0,0,84,
        85,5,114,0,0,85,86,5,84,0,0,86,87,5,104,0,0,87,88,5,97,0,0,88,89,
        5,110,0,0,89,22,1,0,0,0,90,91,5,103,0,0,91,92,5,114,0,0,92,93,5,
        101,0,0,93,94,5,97,0,0,94,95,5,116,0,0,95,96,5,101,0,0,96,97,5,114,
        0,0,97,98,5,84,0,0,98,99,5,104,0,0,99,100,5,97,0,0,100,101,5,110,
        0,0,101,24,1,0,0,0,102,103,5,103,0,0,103,104,5,114,0,0,104,105,5,
        101,0,0,105,106,5,97,0,0,106,107,5,116,0,0,107,108,5,101,0,0,108,
        109,5,114,0,0,109,110,5,84,0,0,110,111,5,104,0,0,111,112,5,97,0,
        0,112,113,5,110,0,0,113,114,5,79,0,0,114,115,5,114,0,0,115,116,5,
        69,0,0,116,117,5,113,0,0,117,118,5,117,0,0,118,119,5,97,0,0,119,
        120,5,108,0,0,120,121,5,84,0,0,121,122,5,111,0,0,122,26,1,0,0,0,
        123,124,5,108,0,0,124,125,5,101,0,0,125,126,5,115,0,0,126,127,5,
        115,0,0,127,128,5,84,0,0,128,129,5,104,0,0,129,130,5,97,0,0,130,
        131,5,110,0,0,131,132,5,79,0,0,132,133,5,114,0,0,133,134,5,69,0,
        0,134,135,5,113,0,0,135,136,5,117,0,0,136,137,5,97,0,0,137,138,5,
        108,0,0,138,139,5,84,0,0,139,140,5,111,0,0,140,28,1,0,0,0,141,142,
        5,110,0,0,142,143,5,111,0,0,143,144,5,116,0,0,144,30,1,0,0,0,145,
        146,5,116,0,0,146,147,5,114,0,0,147,148,5,117,0,0,148,149,5,116,
        0,0,149,154,5,104,0,0,150,151,5,108,0,0,151,152,5,105,0,0,152,154,
        5,101,0,0,153,145,1,0,0,0,153,150,1,0,0,0,154,32,1,0,0,0,155,159,
        7,0,0,0,156,158,7,1,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,
        1,0,0,0,159,160,1,0,0,0,160,34,1,0,0,0,161,159,1,0,0,0,162,164,7,
        2,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,
        0,0,0,166,36,1,0,0,0,167,169,7,3,0,0,168,167,1,0,0,0,169,170,1,0,
        0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,6,18,
        0,0,173,38,1,0,0,0,174,175,5,37,0,0,175,40,1,0,0,0,5,0,153,159,165,
        170,1,6,0,0
    ]

class mlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    BOOL = 16
    ID = 17
    INT = 18
    WS = 19
    MOD = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'cast'", "'is'", "';'", "'say'", "'*'", "'/'", "'+'", "'-'", 
            "'andAlso'", "'orElse'", "'smallerThan'", "'greaterThan'", "'greaterThanOrEqualTo'", 
            "'lessThanOrEqualTo'", "'not'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "ID", "INT", "WS", "MOD" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "BOOL", "ID", "INT", "WS", "MOD" ]

    grammarFileName = "mlang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


